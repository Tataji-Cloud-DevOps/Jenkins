pipeline {
    agent any 
    stages {
        stage('First stage') { 
            steps {
                echo "Welcome world!" 
            }
        }
        stage('Second stage') { 
            steps {
                echo "Welcome Tataji" 
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}

### Here all keywords like pipeline,agentany,stages are all directives.


# Declarative Pipeline

## Directives

### environment


````````
The environment directive specifies a sequence of key-value pairs which will be defined
 as environment variables for all steps, or stage-specific steps, depending on where the 
 environment directive is located within the Pipeline.
````````


### Syntax for environment variable
``````
pipeline {
    agent any
    environment { 
        CC = 'clang'
    }
    stages {
        stage('Example') {
            environment { 
                AN_ACCESS_KEY = credentials('my-predefined-secret-text') 
            }
            steps {
                sh 'printenv'
            }
        }
    }
}
``````


### example of the environment variable
``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}

``````

##  Environment variables
# $ env ----it is command for list of environment variables that already declared in the linux.
#   ex : * a=1000 if we declare it will not store in the system heat memory but it is defined as local.
#        * export a=1000 if we declare it will store in the system heat memory.

``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}
``````


## Supported Credentials Type
### Username and password
### If any sort of sensitive information thats need to supply to jenkins where do you declare it?
``````
* Jenkins offers a quite generic and secret manager where we store the secrets and we can fetch the secrets.
* Set the jenkins secret credentilas by below steps.
* Manage JENKINS > Credentials > System > Global credentials > Add credentials. # (First we have set these setup for username and password)

``````

### Username and password pipeline
### Syntax
``````
pipeline {
    agent any
    environment { 
        CC = 'clang'
    }
    stages {
        stage('Example') {
            environment { 
                AN_ACCESS_KEY = credentials('my-predefined-secret-text') 
            }
            steps {
                sh 'printenv'
            }
        }
    }
}
``````

### Senerio
``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
        SSHCRED = credentials('SSHCRED')       # The secret manager has run at the the top of the pipeline
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}
``````

# Work Space of Jenkins
``````
It is the current or in directory of where the job runs

WORKSPACE=/var/lib/jenkins/workspace/Sample Pipeline SCM
``````

# Otions

  * Discard old builds : It is for to discard the old buils.(For old logs to delete)
  * Do not allow concurrent bills : At a time the same cannot run by this option (it goes in a que).

## Discard old build in the form of code and the option wiil select automatically in the Jenkins UI

``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
        SSHCRED = credentials('SSHCRED')       # The secret manager has run at the the top of the pipeline
    }
    options { buildDiscarder(logRotator(numToKeepStr: '5')) }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}
``````

## Do not allow concurrent bills or disableConcurrentBuilds and the option wiil select automatically in the Jenkins UI
``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
        SSHCRED = credentials('SSHCRED')       # The secret manager has run at the the top of the pipeline
    }
    options {
     buildDiscarder(logRotator(numToKeepStr: '5'))
     disableConcurrentBuilds()
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}
``````

## timeout 
* Set a timeout period for this stage, after which Jenkins should abort the stage. For example: options { timeout(time: 1, unit: 'HOURS') }
* It is for to run a job at a certain period of time when we build.
``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
        SSHCRED = credentials('SSHCRED')       # The secret manager has run at the the top of the pipeline
    }
    options {
     buildDiscarder(logRotator(numToKeepStr: '5'))
     disableConcurrentBuilds()
     timeout(time: 1, unit: 'MINUTES')
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}
``````

## Parameters
* Parameter are like string parameters

``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
        SSHCRED = credentials('SSHCRED')       # The secret manager has run at the the top of the pipeline
    }
    options {
     buildDiscarder(logRotator(numToKeepStr: '5'))
     disableConcurrentBuilds()
     timeout(time: 1, unit: 'MINUTES')
    }
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}
``````

## TOOLS
* On the fly Jenkins will install the needed version for this job ---->Post of the completion of the Job, that will be deleted from the system.
``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
        SSHCRED = credentials('SSHCRED')       # The secret manager has run at the the top of the pipeline
    }
    options {
     buildDiscarder(logRotator(numToKeepStr: '5'))
     disableConcurrentBuilds()
     timeout(time: 1, unit: 'MINUTES')
    }
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
    }
    tools {
        maven 'apache-maven-395'
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
               sh "mvn --version"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
           tools {
               maven 'apache-maven-398'
    }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
                sh "mvn --version"
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}
``````

## Cron : Running the job based on just the scheduler
### Syntax
``````
triggers { cron('H */4 * * 1-5') }
``````


``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
        SSHCRED = credentials('SSHCRED')       # The secret manager has run at the the top of the pipeline
    }
    options {
     buildDiscarder(logRotator(numToKeepStr: '5'))
     disableConcurrentBuilds()
     timeout(time: 1, unit: 'MINUTES')
    }
    triggers { cron('H */4 * * 1-5') }        # In Jenkins instead of '*' we use 'H'.
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
    }
    tools {
        maven 'apache-maven-395'
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
               sh "mvn --version"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
           tools {
               maven 'apache-maven-398'
    }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
                sh "mvn --version"
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}
``````

PollSCM : We can schedule some time -----> It goes and checks the git repo that you mentioned---->if there are any commits on the repo,then the job will run

``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
        SSHCRED = credentials('SSHCRED')       # The secret manager has run at the the top of the pipeline
    }
    options {
     buildDiscarder(logRotator(numToKeepStr: '5'))
     disableConcurrentBuilds()
     timeout(time: 1, unit: 'MINUTES')
    }
    triggers { pollSCM('H */4 * * 1-5') }      # In Jenkins instead of '*' we use 'H'.
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
    }
    tools {
        maven 'apache-maven-395'
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
               sh "mvn --version"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
           tools {
               maven 'apache-maven-398'
    }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
                sh "mvn --version"
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        }
    }
}
``````

# Backlog

`````` 
* Configure a webHook between Jenkins and GitHub.
* So that when there is any commit on xyz-repo, jenins-xyx would be triggered automatically.
``````

# Para

``````
pipeline {
    agent any 
    environment { 
        ENV URL = "Pipeline.google.com"        # Global Variable : All the stages of the pipeline can inherit this
        SSHCRED = credentials('SSHCRED')       # The secret manager has run at the the top of the pipeline
    }
    options {
     buildDiscarder(logRotator(numToKeepStr: '5'))
     disableConcurrentBuilds()
     timeout(time: 1, unit: 'MINUTES')
    }
    triggers { pollSCM('H */4 * * 1-5') }      # In Jenkins instead of '*' we use 'H'.
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
    }
    tools {
        maven 'apache-maven-395'
    }
    stages {
        stage('First stage') { 
            steps {
               sh "echo Welcome world!" 
               sh "echo ${ENV_URL}"
               sh "mvn --version"
            }
        }
        stage('Second stage') { 
             environment { 
                 ENV URL = "Pipeline.google.com"  # Local Variable :Scope of the local variable is confined to this stage only
           }
           tools {
               maven 'apache-maven-398'
    }
            steps {
                sh "echo Welcome Tataji"
                sh "echo ${ENV_URL}" 
                sh "env"                  # Environment variables
                sh "mvn --version"
            }
        }
        stage('Third stage') { 
            steps {
               echo "Welcome DevOps"
            }
        stage('Testing') {
            parallel { 
                    stage('unit testing') {
                        steps {
                        sh "echo unit testing is in progress"
                        sh "sleep 60"
                        }
                    stage('Integration testing') {
                        steps {
                        sh "echo integration testing is in progress"
                        sh "sleep 60"
                        }
                    stage('functional testing') {}
                        steps {
                        sh "echo functional testing is in progress"
                        sh "sleep 60"
                    }
                }
            }
        } 
    }
}
``````